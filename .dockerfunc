composer() {
  docker run \
  --rm \
  -u $(id -u):$(id -g) \
  -v $(pwd):/app \
  -v ${HOME}/appdata/.composer:/${COMPOSER_HOME}/cache \
  composer/composer \
  $@
}
_yarn() {
  docker run \
  --rm \
  -u "node" \
  -w "/home/node/app" \
  -v "$(pwd):/home/node/app" \
  node yarn \
  $@
}
_node() {
  docker run \
  --rm \
  -u "node" \
  -w "/home/node/app" \
  -v "$(pwd):/home/node/app" \
  node node \
  $@
}

_npm() {
  docker run \
  --rm \
  -u "node" \
  -w "/home/node/app" \
  -v "$(pwd):/home/node/app" \
  node npm \
  $@
}


wordpress() {
  local sitename="${1:-wordpress}"
  echo "Creating docker contaner: ${sitename}"
  docker run \
  --name ${sitename} \
  -v ${HOME}/Development/wordpress/${sitename}/wp-content:/var/www/html/wp-content \
  -e WORDPRESS_DB_HOST="mysql57:3306" \
  -e WORDPRESS_DB_PASSWORD="r@nD0m7772" \
  -e WORDPRESS_DB_NAME="${sitename}" \
  -e WORDPRESS_DEBUG="true" \
  -e WP_GROUP=$(id -g) \
  -e VIRTUAL_HOST="${sitename:-wp}.test" \
  --link mysql57:mysql \
  --restart=unless-stopped \
  -u :$(id -g) \
  -d \
  sturple/wordpress
  echo "Visit http://${sitename}.test to view this site."
  echo "Dabtabase: mysql57:${sitename}"
  echo -e "\033[93m***** Run dockerUpdateHost.sh to update host file\033[32m"
}

wordpress_multisite() {
  # setup wordpress multisite
  #mysql
  #phpadmin
  local sitename="${1:-wordpress_multisite}"
  echo "Creating docker contaner: ${sitename}"
  docker run \
  --name ${sitename} \
  -v ${HOME}/Development/wordpress/${sitename}/wp-content:/var/www/html/wp-content \
  -e WORDPRESS_DB_HOST="mysql57:3306" \
  -e WORDPRESS_DB_PASSWORD="r@nD0m7772" \
  -e WORDPRESS_MULTISITE="true" \
  -e WORDPRESS_DB_NAME="${sitename}" \
  -e WORDPRESS_DEBUG="true" \
  -e WP_GROUP=$(id -g) \
  -e VIRTUAL_HOST="${sitename:-wordpress}.test" \
  --link mysql57:mysql \
  --restart=unless-stopped \
  -u :$(id -g) \
  -d \
  sturple/wordpress
  echo "Visit http://${sitename}.test to view this site."
  echo "Dabtabase: mysql57:${sitename}"
  echo -e "\033[93m***** Run dockerUpdateHost.sh to update host file\033[32m"
}

mysql() {
  docker exec \
  -it \
  mysql57 \
  mysql -p

}
mysql_stop() {
  local is_running=$(docker ps --filter "status=running" --filter "name=mysql57" -q)
  if [ ! -z "$is_running" ]; then
    docker stop "$is_running"
    echo -e "\033[97mStopped mysql57\033[32m"
  fi
}
mysql_start() {
  local is_running=$(docker ps --filter "status=running" --filter "name=mysql57" -q)
  if [ -z "$is_running" ]; then
    local is_exited=$(docker ps --filter "status=exited" --filter "name=mysql57" -q)
    if [ -z "$is_exited" ]; then
      docker run \
      --name mysql57 \
      -v ${HOME}/appdata/.mysql:/var/lib/mysql \
      -e MYSQL_ROOT_PASSWORD="r@nD0m7772" \
      --restart always \
      -d \
      mysql:5.7
      echo -e "\033[97mStarted mysql57\033[32m"
    else
        docker restart mysql57
        echo -e "\033[97mRestarted mysql57\033[32m"
    fi
  else
    echo -e "\033[97mAlready running mysql57\033[32m"
  fi

}

phpmyadmin_start() {
  docker run \
  --name phpmyadmin \
  -e MYSQL_ROOT_PASSWORD="r@nD0m7772" \
  -e PMA_HOST="mysql57" \
  -e VIRTUAL_HOST="phpmyadmin.test" \
  --link mysql57:mysql \
  --restart always \
  -d \
  phpmyadmin/phpmyadmin
  echo "Visit http://phpmyadmin.test to view this site."
}

revproxy_start() {
  local port=${1:-80}
  docker run \
  --name revproxy \
  -d \
  -p "$port":80 \
  -v /var/run/docker.sock:/tmp/docker.sock:ro  \
  -e DEFAULT_HOST=local.test \
  --restart always \
  jwilder/nginx-proxy
  echo -e "\033[93mStarting Reverse proxy, makes sure to run the dockerUpdateHost.sh, after all services are running\033[32m"
}
